<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://clojureto.github.io' rel='self' type='application/rss+xml'/>
<title>
ClojureTO
</title>
<link>
http://clojureto.github.io
</link>
<description>
Website of the Clojure Community Living or Working in Toronto, Ontario, Canada.
</description>
<lastBuildDate>
Fri, 19 Apr 2019 21:07:25 +0000
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://clojureto.github.io/posts/2019-03-12-clojure-north
</guid>
<link>
http://clojureto.github.io/posts/2019-03-12-clojure-north
</link>
<title>
Clojure/north - April 19-20th, 2019 Toronto
</title>
<description>
&lt;p&gt;Sometimes I ask myself if I will ever attend a Clojure conference again after they launched &lt;a href='https://www.youtube.com/user/ClojureTV'&gt;ClojureTV&lt;/a&gt; on YouTube. They publish every Clojure talk that happens out there. Why would I expected more than that?&lt;/p&gt;&lt;p&gt;My way of thinking was challenged when I met &lt;strong&gt;Nikola Peric&lt;/strong&gt;, the VP of IT at a company called &lt;a href='http://synqrinus.com'&gt;Synqrinus&lt;/a&gt;. We talked about a conference he is organizing in Toronto for the Clojure community. Nikola is clearly an entrepreneur because when I asked him to tell me about himself he described his company instead - &quot;... we are pushing the boundaries in the market research space with our technology and tools. There, I focus on architecting and leading the development of our secret weapons that give us a competitive advantage in the industry&quot;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/clojure-north-interview.jpg&quot; alt=&quot;Interviewing Nikola Peric&quot; /&gt;&lt;/p&gt;&lt;p&gt;This Clojure conference he is talking about is called &lt;a href='https://clojurenorth.com'&gt;Clojure/north&lt;/a&gt;. &quot;We liked Clojure/north's play on Clojure/west. After all, we are north of the States&quot;, he noted. The idea is to have a non-profit conference that is accessible and low-cost, organized by volunteers, with a ticket price of just C$180, counting on the extra help of sponsors. Disclosing that price and their engagement was when he got my interest. After all, a lot of tech conferences go for a minimum of C$500!&lt;/p&gt;&lt;p&gt;Nikola is not doing all this alone. The core team consists of &lt;strong&gt;Dmitri Sotnikov&lt;/strong&gt;, &lt;strong&gt;Carmen La&lt;/strong&gt;, &lt;strong&gt;Raey Ang&lt;/strong&gt;, and &lt;strong&gt;Lubov Soltan&lt;/strong&gt;. &quot;Dmitri is reaching out many of our speakers and drumming up interest in the event. Carmen slapped together the entire website in no time at all and helps out with general organization. Raey is the AV producer for the event, bringing in expertise from the film industry to keep it all professional. Lubov designed the minimalist logo, and has helped with other design aspects such as our gorgeous sponsor package&quot;, he detailed and then completed - &quot;I tend to do a lot of the administrative tasks such as managing the Twitter account, venue registration, emails, etc. Dmitri, Carmen, and myself talk through the strategy, and programming for the event. We have a fantastic team!&quot;. I could see in his eyes how important those people are for him. Another level of friendship was born. I was gradually getting the point of going to a conference.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/clojure-north-interview-2.jpg&quot; alt=&quot;Interviewing Nikola Peric&quot; /&gt;&lt;/p&gt;&lt;p&gt;As my interest was growing, I was curious about the talks and what sense I could make of them. &quot;We asked this question to ourselves: 'how do we demonstrate where Clojure is having a huge impact in the real world?' and we expect to get people telling us their stories about Clojure helping them grow, the benefits it reaped, along with the struggles and challenges that came with it. In doing so, we hope that we can encourage broader adoption of the language.&quot;, he said. This is deep. He was basically saying that if you put people with the same passion, experiences, and struggles in the same space they will make such strong connections that it will transcend technology. And here lies the difference between ClojureTV and a conference: the former only offers technology and the conference offers the human side of it, which is infinitely valuable. &quot;The best part, by far, is connecting all these people in one place. I'm thrilled to meet all these big names, and see some fantastic talks so it's kind of a win-win - get to have all of it happen in my back yard, and also allow others to partake in the same experience!&quot;, he concluded.&lt;/p&gt;&lt;p&gt;I'm not saying that Clojure/north won't be available online afterwards. It will. &quot;We'll also be professional recording the talks so hopefully those who are unable to attend will see the talks in a few weeks after the event&quot;, he confirmed and then got surprised by my sudden laugh - as if he was a comedian who connected his final joke with the one he told at the beginning.&lt;/p&gt;&lt;p&gt;&lt;center&gt;&lt;a href=&quot;https://clojurenorth.com&quot; target=&quot;blank&quot;&gt;&lt;img src=&quot;/img/clojure-north-logo.png&quot; alt=&quot;Clojure/north Logo&quot; /&gt;&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;&lt;h3 id=&quot;heads-up&quot;&gt;Heads-up&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;Registrations are open. &lt;a href='https://ti.to/clojure-north/clojure-north-2019'&gt;Register now&lt;/a&gt; and meet me there! I won't appear in the recordings.&lt;/li&gt;&lt;li&gt;Three big open source launches from our speakers will coincide with the event so that will be a big impact!&lt;/li&gt;&lt;li&gt;If anyone is interested in volunteering their time at the event do feel free to reach out at hello@clojurenorth.com, we do need a few volunteers.&lt;/li&gt;&lt;li&gt;If anyone works at a Clojure company we'd appreciate any additional sponsorship to help finance the event. The full sponsor prospectus can be found at [https://clojurenorth.com/clojure-north-2019-sponsorship-package.pdf].&lt;/li&gt;&lt;/ol&gt;
</description>
<author>
Hildeberto Mendonca
</author>
<pubDate>
Tue, 12 Mar 2019 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://clojureto.github.io/posts/2019-03-05-website-contributing
</guid>
<link>
http://clojureto.github.io/posts/2019-03-05-website-contributing
</link>
<title>
How to Contribute to ClojureTO Website
</title>
<description>
&lt;p&gt;The wind is blowing at 85km/h outside, followed by rain and snow with low visibility. I couldn't find anything more interesting to do other than contributing to ClojureTO website. The goal today is to write a recursive article that explains how to contribute to this website by publishing itself.&lt;/p&gt;&lt;h3 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h3&gt;&lt;p&gt;That's what I need to be able to contribute:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;: as a technical person, I have the habit of versioning the work I do. Git is the tool I use for that. This is also the tool needed to manage and publish the website.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: ClojureTO uses GitHub Pages as a hosting service. In short, when we push content to a repository it gets published on the website. To synchronize content with GitHub I need a GitHub account and Git.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Leiningen&lt;/strong&gt;: this is the portal to enter in the Clojure World. A Swiss knife to manage Clojure projects. I use it to tests the changes I make in the website. I was also used it to create the website in the first place.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cryogen&lt;/strong&gt;: this tool, in combination with Leiningen, built this entire website. We explained how we did it in a &lt;a href='/posts/2019-02-23-website-behind'&gt;previews article&lt;/a&gt;. Now, I need it to produce the content, define the layout, the style, and the navigation.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Passion for Clojure&lt;/strong&gt;: to write such long and rich content, a good deal of time and knowledge is required. My passion for Clojure motivates me to do it.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Community Driven&lt;/strong&gt;: a genuine intention to share knowledge and help others is also required.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;forking&amp;#95;the&amp;#95;repository&quot;&gt;Forking The Repository&lt;/h3&gt;&lt;p&gt;Not everybody is a good friend of a ClojureTO's co-organizer to claim push privileges. So, I need to start by forking &lt;a href='https://github.com/ClojureTO/clojureto-website'&gt;clojureto-website&lt;/a&gt;. I click on the &lt;strong&gt;Fork&lt;/strong&gt; button and get a new repository in my account. My contributions will remain there until it's time for a pull request.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/fork-clojureto-website.png&quot; alt=&quot;Forking clojureto-website repository&quot; /&gt;&lt;/p&gt;&lt;p&gt;I clone the repository locally so I can start contributing:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/htmfilho/clojureto-website.git&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;cryogen&amp;#95;basics&quot;&gt;Cryogen Basics&lt;/h3&gt;&lt;p&gt;Understanding Cryogen is discovering ways of contributing. Its &lt;a href='http://cryogenweb.org'&gt;website&lt;/a&gt; covers all details. In summary, those with design skills could jump into &lt;code&gt;resources/templates/themes&lt;/code&gt; and redefine how the content is presented, improve navigation, readability, harmonize colors, shapes. I personally have no talent there, so I care more about content, which is located at &lt;code&gt;resources/templates/md&lt;/code&gt;. The one place that should not be touched at all is the folder &lt;code&gt;resources/public&lt;/code&gt;. Those files are replaced whenever the files in the previously mentioned folders are modified and saved.&lt;/p&gt;&lt;h3 id=&quot;writing&amp;#95;the&amp;#95;contribution&quot;&gt;Writing the Contribution&lt;/h3&gt;&lt;p&gt;I wish I could write the content in Clojure, but that's not practical. So, I stick to &lt;a href='https://daringfireball.net/projects/markdown/'&gt;Markdown&lt;/a&gt;, a format supported by Cryogen. Markdown eliminates the pain of writing content in HTML by offering a minimalist markup language for web authoring. All the content in Markdown, including this article, is located at &lt;code&gt;resources/templates/md&lt;/code&gt;. I can write &lt;strong&gt;pages&lt;/strong&gt;, which are more institutional, and &lt;strong&gt;posts&lt;/strong&gt;, which represent facts, perspectives, experiences, and discoveries.&lt;/p&gt;&lt;p&gt;Apart from Markdown, there is a caveat. At the top of a page or post, there is a Clojure-like map where we define values expected by the theme. For a page, there is something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{:title &amp;quot;About&amp;quot;
 :layout :page
 :page-index 0
 :navbar? true}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I would emphasize &lt;code&gt;:page-index&lt;/code&gt;, which defines the order the page appears in the navigation, and &lt;code&gt;:navbar?&lt;/code&gt; to include the page in the top menu. For this post in particular, I used this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;{:title &amp;quot;How to Contribute to ClojureTO Website&amp;quot;
 :author &amp;quot;Hildeberto Mendonca&amp;quot;
 :layout :post
 :tags  &amp;#91;&amp;quot;Cryogen&amp;quot; &amp;quot;Website&amp;quot; &amp;quot;Github&amp;quot; &amp;quot;Markdown&amp;quot;&amp;#93;
 :toc true}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A special attention to &lt;code&gt;:tags&lt;/code&gt;, which helps to organize the content, and &lt;code&gt;:toc&lt;/code&gt; to show a table of content to help navigating in a long post.&lt;/p&gt;&lt;h3 id=&quot;previewing&amp;#95;the&amp;#95;content&quot;&gt;Previewing the Content&lt;/h3&gt;&lt;p&gt;To preview the content exactly as it will appear on the website, I go to the root of the repository and run the following command:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein ring server&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a few seconds, the default browser opens and shows the website. Since this article is the most recent one, it appears in the front page, as shown in the image below:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/preview-content-website.png&quot; alt=&quot;Forking clojureto-website repository&quot; /&gt;&lt;/p&gt;&lt;p&gt;Every time I save the file that I'm working on, the website is regenerated and the last changes are ready to see.&lt;/p&gt;&lt;h3 id=&quot;committing&amp;#95;and&amp;#95;pushing&amp;#95;changes&quot;&gt;Committing and Pushing Changes&lt;/h3&gt;&lt;p&gt;At this point in time, the article is finished and ready to submit. I commit all my changes, including text and images, and push to my own fork:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git add resources/templates/md/posts/2019-03-05-website-contributing.md
$ git add resources/templates/img/fork-clojureto-website.png
$ git add resources/templates/img/preview-content-website.png
$ git commit -m &amp;quot;Article 'How to Contribute to ClojureTO Website'&amp;quot;
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that I add each artifact one by one, instead of running a practical command like &lt;code&gt;git add .&lt;/code&gt;. The reason is because I don't want to accidentally mess up with the submodule located at &lt;code&gt;resources/public&lt;/code&gt;. More details latter on.&lt;/p&gt;&lt;h3 id=&quot;creating&amp;#95;a&amp;#95;pull&amp;#95;request&quot;&gt;Creating a Pull Request&lt;/h3&gt;&lt;p&gt;The pull request happens on GitHub. Now that the changes are pushed, my fork is different from the original, and this difference is exactly the content of the pull request I'm creating. I click on the button &quot;New pull request&quot; and it shows me the differences.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/pullrequest-content-website.png&quot; alt=&quot;Pull request from my fork to clojureto-website repository&quot; /&gt;&lt;/p&gt;&lt;p&gt;When I click the green button &quot;Create pull request&quot; I'm actually submitting my changes for review by one of the website's editors. My work is probably not done yet because they may ask me to fix some typos, rephrase some sentences and clarify others. I do extra changes and I just keep pushing to my master branch to have my pull request updated.&lt;/p&gt;&lt;p&gt;When the pull request is accepted and the merge is done, it doesn't mean the content is immediately published on the website. The editor has some work to do as well.&lt;/p&gt;&lt;h3 id=&quot;updating&amp;#95;the&amp;#95;website&amp;#95;with&amp;#95;the&amp;#95;contribution&quot;&gt;Updating the Website with the Contribution&lt;/h3&gt;&lt;p&gt;The editor is the person responsible for accepting the pull request and publishing the contributions in the sequence. This person has special push privileges to the repositories &lt;a href='https://github.com/ClojureTO/clojureto-website'&gt;clojureto-website&lt;/a&gt; and &lt;a href='https://github.com/ClojureTO/clojureto.github.io'&gt;clojureto-github.io&lt;/a&gt;. The pull request is merged and now the editor needs to generate the static content. In the event she never did it before, she starts by cloning the clojureto-website repository:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ClojureTO/clojureto-website.git
$ cd clojureto-website&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The editor has all recent changes locally and needs to setup the submodule &lt;code&gt;clojureto.github.io&lt;/code&gt; in the folder &lt;code&gt;resources/public&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git submodule init
$ git submodule update
$ git submodule foreach git pull origin master&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, the folder &lt;code&gt;resources/public&lt;/code&gt; contains the most recent published content, but it needs to be updated with the most recent one. To do that, the editor needs to launch Cryogen once, so it can regenerate the static website in the folder &lt;code&gt;resource/public&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein ring server&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To stop the server she presses &lt;code&gt;Ctrl+C&lt;/code&gt; and then she notices the content of the folder &lt;code&gt;resource/public&lt;/code&gt; has changed:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cd resources/public
$ git status&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;She needs to move to the master branch, commit all the changes and push to the repository &lt;code&gt;clojureto.github.io&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git checkout master
$ git add .
$ git commit -m &amp;quot;Published article 'How to Contribute to ClojureTO Website'&amp;quot;
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the push is completed the latest contributions to the website are published! But the work is not done. There is still a final step, which is updating the submodule of the the repository &lt;code&gt;clojureto-website&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cd ../..
$ git add resources/public
$ git commit -m &amp;quot;Updated submodule reference.&amp;quot;
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That's enough with this website and Git. Starting next post, everything will be about the Community and Clojure!&lt;/p&gt;
</description>
<author>
Hildeberto Mendonca
</author>
<pubDate>
Tue, 05 Mar 2019 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://clojureto.github.io/posts/2019-02-23-website-behind
</guid>
<link>
http://clojureto.github.io/posts/2019-02-23-website-behind
</link>
<title>
What is Behind clojureto.github.io
</title>
<description>
&lt;p&gt;Building a static website never felt so dynamic nowadays. With a basic technical background we can build a low cost website with minimal infra-structure in no time. Tools like &lt;a href='https://jekyllrb.com'&gt;Jekyll&lt;/a&gt; and &lt;a href='https://jbake.org'&gt;JBake&lt;/a&gt; are popular choices, but the Clojure community count on its own solution: &lt;a href='http://cryogenweb.org'&gt;Cryogen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Cryogen is a static site generator developed in Clojure by &lt;a href='https://carmen.la'&gt;Carmen La&lt;/a&gt;, a member of the ClojureTO community. It allows us to produce content in &lt;a href='https://daringfireball.net/projects/markdown/'&gt;Markdown&lt;/a&gt;, manage content data in Clojure, and make everything beautiful with templates in HTML. It is simple to use and has everything we need. So, here you are reading this content generated by Cryogen.&lt;/p&gt;&lt;p&gt;This website is hosted on &lt;a href='https://pages.github.com'&gt;GitHub Pages&lt;/a&gt;, which offers free hosting for static content, but Jekyll is the only static site generator natively  integrated with GitHub. It means we push content and GitHub takes care of the static content generation. This magic doesn't happen with Cryogen. GitHub offers some configuration alternatives, like recognizing a &lt;code&gt;/doc&lt;/code&gt; folder as the root of the static content, but it isn't true for organizations or projects (organization|project.github.io), where the static content must be in the root of the repository. Until they fix this inconsistency, we had to come up with another solution.&lt;/p&gt;&lt;p&gt;To persist on the idea of using Cryogen, we needed to rearrange the pieces of the game. It consisted of using 2 Git repositories, one for the Cryogen project (&lt;a href='https://github.com/ClojureTO/clojureto-website'&gt;clojureto-website&lt;/a&gt;) and another one for the generated static pages (&lt;a href='https://github.com/ClojureTO/clojureto.github.io'&gt;clojureto.github.io&lt;/a&gt;). The last one is a Git sub-module of the first, replacing the folder &lt;code&gt;resources/public&lt;/code&gt; where the static content is generated.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/clojureto-website-submodule.png&quot; alt=&quot;Two website repositories&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://git-scm.com/book/en/v2/Git-Tools-Submodules'&gt;Submodule&lt;/a&gt; is a Git capability that enables a Git repository be a sub-directory of another one while keeping commits separated. In our context, it basically means that pushing commits to &lt;code&gt;clojureto-website&lt;/code&gt; doesn't update the website, but pushing changes generated by Cryogen in the folder &lt;code&gt;resources/public&lt;/code&gt; to &lt;code&gt;clojureto.github.io&lt;/code&gt; does update the website.&lt;/p&gt;&lt;p&gt;To create the submodule, we first had to delete the folder &lt;code&gt;resources\public&lt;/code&gt; and then execute the following commands:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ git submodule add https://github.com/ClojureTO/clojureto.github.io.git resources/public
$ git submodule init
$ git add .gitmodules
$ git add resources/public
$ git commit -m &amp;quot;Added the website repo as a submodule&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In an upcoming post we will explain how to contribute with content to this website without getting lost in the concept of submodule.&lt;/p&gt;
</description>
<author>
Hildeberto Mendonca
</author>
<pubDate>
Sat, 23 Feb 2019 00:00:00 +0000
</pubDate>
</item>
</channel>
</rss>
